// Test: List Transform (aaddin) Method
// This test demonstrates the usage of the aaddin() method for transforming lists

// Define transformation functions
hawl laban(x) {
  celi x * 2
}

hawl ku_badal_qoraal(x) {
  celi "Tiro_" + x
}

hawl kent_juft(x) {
  haddii (x % 2 == 0) {
    celi "Juft_" + x
  } kale {
    celi "Kent_" + x
  }
}

// Let's remove the object test until we better understand Soplang's object syntax
// We've successfully demonstrated the core functionality with numbers and strings

bandhig("Testing list transform (aaddin) method:")

// Create a sample list
liis numbers = [1, 2, 3, 4, 5]
bandhig("Original list: " + numbers)

// Apply number transformation (doubling)
liis result1 = numbers.aaddin("laban")
bandhig("After numbers.aaddin('laban'): " + result1)  // Should be [2, 4, 6, 8, 10]

// Apply string transformation (adding prefix)
liis result2 = numbers.aaddin("ku_badal_qoraal")
bandhig("After numbers.aaddin('ku_badal_qoraal'): " + result2)  // Should be ["Tiro_1", "Tiro_2", ...]

// Apply conditional transformation (even/odd)
liis result3 = numbers.aaddin("kent_juft")
bandhig("After numbers.aaddin('kent_juft'): " + result3)  // Should process even/odd numbers differently

// Confirm original list is unchanged
bandhig("Original list after transforms: " + numbers)  // Should still be [1, 2, 3, 4, 5]

bandhig("List transform test completed!")
